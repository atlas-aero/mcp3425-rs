extern crate embedded_hal as hal;
extern crate linux_embedded_hal as linux_hal;
extern crate mcp3425;

use linux_hal::{Delay, I2cdev};
use mcp3425::{MCP3425, Config, Resolution, Gain};

fn main() {
    println!("Hello, MCP3425!");

    let dev = I2cdev::new("/dev/i2c-1").unwrap();
    let address = 0x68;
    let mut adc = MCP3425::continuous(dev, address, Delay);
    let config = Config::new(Resolution::Bits12Sps240, Gain::Gain1);

    let config = config.with_resolution(Resolution::Bits12Sps240);
    println!("Writing 240 SPS configuration to device: {:?}", &config);
    for i in 0..10 {
        println!("Attempts: {}", adc.set_config(&config).unwrap());
    }

    let config = config.with_resolution(Resolution::Bits14Sps60);
    println!("Writing 60 SPS configuration to device: {:?}", &config);
    for i in 0..10 {
        println!("Attempts: {}", adc.set_config(&config).unwrap());
    }

    let config = config.with_resolution(Resolution::Bits16Sps15);
    println!("Writing 15 SPS configuration to device: {:?}", &config);
    for i in 0..10 {
        println!("Attempts: {}", adc.set_config(&config).unwrap());
    }

}
